// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#ifndef PROTOBUF_INCLUDED_user_2eproto
#define PROTOBUF_INCLUDED_user_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_user_2eproto 

namespace protobuf_user_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_user_2eproto
namespace fixbug {
class LoginReq;
class LoginReqDefaultTypeInternal;
extern LoginReqDefaultTypeInternal _LoginReq_default_instance_;
class LoginRsp;
class LoginRspDefaultTypeInternal;
extern LoginRspDefaultTypeInternal _LoginRsp_default_instance_;
class RegisterReq;
class RegisterReqDefaultTypeInternal;
extern RegisterReqDefaultTypeInternal _RegisterReq_default_instance_;
class RegisterRsp;
class RegisterRspDefaultTypeInternal;
extern RegisterRspDefaultTypeInternal _RegisterRsp_default_instance_;
class ResultCode;
class ResultCodeDefaultTypeInternal;
extern ResultCodeDefaultTypeInternal _ResultCode_default_instance_;
}  // namespace fixbug
namespace google {
namespace protobuf {
template<> ::fixbug::LoginReq* Arena::CreateMaybeMessage<::fixbug::LoginReq>(Arena*);
template<> ::fixbug::LoginRsp* Arena::CreateMaybeMessage<::fixbug::LoginRsp>(Arena*);
template<> ::fixbug::RegisterReq* Arena::CreateMaybeMessage<::fixbug::RegisterReq>(Arena*);
template<> ::fixbug::RegisterRsp* Arena::CreateMaybeMessage<::fixbug::RegisterRsp>(Arena*);
template<> ::fixbug::ResultCode* Arena::CreateMaybeMessage<::fixbug::ResultCode>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace fixbug {

// ===================================================================

class ResultCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fixbug.ResultCode) */ {
 public:
  ResultCode();
  virtual ~ResultCode();

  ResultCode(const ResultCode& from);

  inline ResultCode& operator=(const ResultCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResultCode(ResultCode&& from) noexcept
    : ResultCode() {
    *this = ::std::move(from);
  }

  inline ResultCode& operator=(ResultCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultCode* internal_default_instance() {
    return reinterpret_cast<const ResultCode*>(
               &_ResultCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ResultCode* other);
  friend void swap(ResultCode& a, ResultCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResultCode* New() const final {
    return CreateMaybeMessage<ResultCode>(NULL);
  }

  ResultCode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResultCode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResultCode& from);
  void MergeFrom(const ResultCode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fixbug.ResultCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fixbug.LoginReq) */ {
 public:
  LoginReq();
  virtual ~LoginReq();

  LoginReq(const LoginReq& from);

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginReq(LoginReq&& from) noexcept
    : LoginReq() {
    *this = ::std::move(from);
  }

  inline LoginReq& operator=(LoginReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginReq* internal_default_instance() {
    return reinterpret_cast<const LoginReq*>(
               &_LoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LoginReq* other);
  friend void swap(LoginReq& a, LoginReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginReq* New() const final {
    return CreateMaybeMessage<LoginReq>(NULL);
  }

  LoginReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginReq& from);
  void MergeFrom(const LoginReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes pwd = 2;
  void clear_pwd();
  static const int kPwdFieldNumber = 2;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const void* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // @@protoc_insertion_point(class_scope:fixbug.LoginReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fixbug.LoginRsp) */ {
 public:
  LoginRsp();
  virtual ~LoginRsp();

  LoginRsp(const LoginRsp& from);

  inline LoginRsp& operator=(const LoginRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRsp(LoginRsp&& from) noexcept
    : LoginRsp() {
    *this = ::std::move(from);
  }

  inline LoginRsp& operator=(LoginRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRsp* internal_default_instance() {
    return reinterpret_cast<const LoginRsp*>(
               &_LoginRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LoginRsp* other);
  friend void swap(LoginRsp& a, LoginRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRsp* New() const final {
    return CreateMaybeMessage<LoginRsp>(NULL);
  }

  LoginRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginRsp& from);
  void MergeFrom(const LoginRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .fixbug.ResultCode result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  private:
  const ::fixbug::ResultCode& _internal_result() const;
  public:
  const ::fixbug::ResultCode& result() const;
  ::fixbug::ResultCode* release_result();
  ::fixbug::ResultCode* mutable_result();
  void set_allocated_result(::fixbug::ResultCode* result);

  // bool data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  bool data() const;
  void set_data(bool value);

  // @@protoc_insertion_point(class_scope:fixbug.LoginRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::fixbug::ResultCode* result_;
  bool data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegisterReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fixbug.RegisterReq) */ {
 public:
  RegisterReq();
  virtual ~RegisterReq();

  RegisterReq(const RegisterReq& from);

  inline RegisterReq& operator=(const RegisterReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterReq(RegisterReq&& from) noexcept
    : RegisterReq() {
    *this = ::std::move(from);
  }

  inline RegisterReq& operator=(RegisterReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterReq* internal_default_instance() {
    return reinterpret_cast<const RegisterReq*>(
               &_RegisterReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RegisterReq* other);
  friend void swap(RegisterReq& a, RegisterReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterReq* New() const final {
    return CreateMaybeMessage<RegisterReq>(NULL);
  }

  RegisterReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterReq& from);
  void MergeFrom(const RegisterReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes pwd = 3;
  void clear_pwd();
  static const int kPwdFieldNumber = 3;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const void* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fixbug.RegisterReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegisterRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fixbug.RegisterRsp) */ {
 public:
  RegisterRsp();
  virtual ~RegisterRsp();

  RegisterRsp(const RegisterRsp& from);

  inline RegisterRsp& operator=(const RegisterRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterRsp(RegisterRsp&& from) noexcept
    : RegisterRsp() {
    *this = ::std::move(from);
  }

  inline RegisterRsp& operator=(RegisterRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterRsp* internal_default_instance() {
    return reinterpret_cast<const RegisterRsp*>(
               &_RegisterRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RegisterRsp* other);
  friend void swap(RegisterRsp& a, RegisterRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterRsp* New() const final {
    return CreateMaybeMessage<RegisterRsp>(NULL);
  }

  RegisterRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterRsp& from);
  void MergeFrom(const RegisterRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .fixbug.ResultCode result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  private:
  const ::fixbug::ResultCode& _internal_result() const;
  public:
  const ::fixbug::ResultCode& result() const;
  ::fixbug::ResultCode* release_result();
  ::fixbug::ResultCode* mutable_result();
  void set_allocated_result(::fixbug::ResultCode* result);

  // bool data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  bool data() const;
  void set_data(bool value);

  // @@protoc_insertion_point(class_scope:fixbug.RegisterRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::fixbug::ResultCode* result_;
  bool data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// ===================================================================

class UserServiceRpc_Stub;

class UserServiceRpc : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline UserServiceRpc() {};
 public:
  virtual ~UserServiceRpc();

  typedef UserServiceRpc_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Login(::google::protobuf::RpcController* controller,
                       const ::fixbug::LoginReq* request,
                       ::fixbug::LoginRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void Register(::google::protobuf::RpcController* controller,
                       const ::fixbug::RegisterReq* request,
                       ::fixbug::RegisterRsp* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserServiceRpc);
};

class UserServiceRpc_Stub : public UserServiceRpc {
 public:
  UserServiceRpc_Stub(::google::protobuf::RpcChannel* channel);
  UserServiceRpc_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~UserServiceRpc_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements UserServiceRpc ------------------------------------------

  void Login(::google::protobuf::RpcController* controller,
                       const ::fixbug::LoginReq* request,
                       ::fixbug::LoginRsp* response,
                       ::google::protobuf::Closure* done);
  void Register(::google::protobuf::RpcController* controller,
                       const ::fixbug::RegisterReq* request,
                       ::fixbug::RegisterRsp* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResultCode

// int32 code = 1;
inline void ResultCode::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 ResultCode::code() const {
  // @@protoc_insertion_point(field_get:fixbug.ResultCode.code)
  return code_;
}
inline void ResultCode::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:fixbug.ResultCode.code)
}

// bytes msg = 2;
inline void ResultCode::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResultCode::msg() const {
  // @@protoc_insertion_point(field_get:fixbug.ResultCode.msg)
  return msg_.GetNoArena();
}
inline void ResultCode::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fixbug.ResultCode.msg)
}
#if LANG_CXX11
inline void ResultCode::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fixbug.ResultCode.msg)
}
#endif
inline void ResultCode::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.ResultCode.msg)
}
inline void ResultCode::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.ResultCode.msg)
}
inline ::std::string* ResultCode::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:fixbug.ResultCode.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResultCode::release_msg() {
  // @@protoc_insertion_point(field_release:fixbug.ResultCode.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResultCode::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:fixbug.ResultCode.msg)
}

// -------------------------------------------------------------------

// LoginReq

// bytes name = 1;
inline void LoginReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginReq::name() const {
  // @@protoc_insertion_point(field_get:fixbug.LoginReq.name)
  return name_.GetNoArena();
}
inline void LoginReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fixbug.LoginReq.name)
}
#if LANG_CXX11
inline void LoginReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fixbug.LoginReq.name)
}
#endif
inline void LoginReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.LoginReq.name)
}
inline void LoginReq::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.LoginReq.name)
}
inline ::std::string* LoginReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:fixbug.LoginReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginReq::release_name() {
  // @@protoc_insertion_point(field_release:fixbug.LoginReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fixbug.LoginReq.name)
}

// bytes pwd = 2;
inline void LoginReq::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginReq::pwd() const {
  // @@protoc_insertion_point(field_get:fixbug.LoginReq.pwd)
  return pwd_.GetNoArena();
}
inline void LoginReq::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fixbug.LoginReq.pwd)
}
#if LANG_CXX11
inline void LoginReq::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fixbug.LoginReq.pwd)
}
#endif
inline void LoginReq::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.LoginReq.pwd)
}
inline void LoginReq::set_pwd(const void* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.LoginReq.pwd)
}
inline ::std::string* LoginReq::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:fixbug.LoginReq.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginReq::release_pwd() {
  // @@protoc_insertion_point(field_release:fixbug.LoginReq.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:fixbug.LoginReq.pwd)
}

// -------------------------------------------------------------------

// LoginRsp

// .fixbug.ResultCode result = 1;
inline bool LoginRsp::has_result() const {
  return this != internal_default_instance() && result_ != NULL;
}
inline void LoginRsp::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) {
    delete result_;
  }
  result_ = NULL;
}
inline const ::fixbug::ResultCode& LoginRsp::_internal_result() const {
  return *result_;
}
inline const ::fixbug::ResultCode& LoginRsp::result() const {
  const ::fixbug::ResultCode* p = result_;
  // @@protoc_insertion_point(field_get:fixbug.LoginRsp.result)
  return p != NULL ? *p : *reinterpret_cast<const ::fixbug::ResultCode*>(
      &::fixbug::_ResultCode_default_instance_);
}
inline ::fixbug::ResultCode* LoginRsp::release_result() {
  // @@protoc_insertion_point(field_release:fixbug.LoginRsp.result)
  
  ::fixbug::ResultCode* temp = result_;
  result_ = NULL;
  return temp;
}
inline ::fixbug::ResultCode* LoginRsp::mutable_result() {
  
  if (result_ == NULL) {
    auto* p = CreateMaybeMessage<::fixbug::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:fixbug.LoginRsp.result)
  return result_;
}
inline void LoginRsp::set_allocated_result(::fixbug::ResultCode* result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete result_;
  }
  if (result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:fixbug.LoginRsp.result)
}

// bool data = 2;
inline void LoginRsp::clear_data() {
  data_ = false;
}
inline bool LoginRsp::data() const {
  // @@protoc_insertion_point(field_get:fixbug.LoginRsp.data)
  return data_;
}
inline void LoginRsp::set_data(bool value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:fixbug.LoginRsp.data)
}

// -------------------------------------------------------------------

// RegisterReq

// uint32 id = 1;
inline void RegisterReq::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 RegisterReq::id() const {
  // @@protoc_insertion_point(field_get:fixbug.RegisterReq.id)
  return id_;
}
inline void RegisterReq::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:fixbug.RegisterReq.id)
}

// bytes name = 2;
inline void RegisterReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterReq::name() const {
  // @@protoc_insertion_point(field_get:fixbug.RegisterReq.name)
  return name_.GetNoArena();
}
inline void RegisterReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fixbug.RegisterReq.name)
}
#if LANG_CXX11
inline void RegisterReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fixbug.RegisterReq.name)
}
#endif
inline void RegisterReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.RegisterReq.name)
}
inline void RegisterReq::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.RegisterReq.name)
}
inline ::std::string* RegisterReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:fixbug.RegisterReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterReq::release_name() {
  // @@protoc_insertion_point(field_release:fixbug.RegisterReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fixbug.RegisterReq.name)
}

// bytes pwd = 3;
inline void RegisterReq::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterReq::pwd() const {
  // @@protoc_insertion_point(field_get:fixbug.RegisterReq.pwd)
  return pwd_.GetNoArena();
}
inline void RegisterReq::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fixbug.RegisterReq.pwd)
}
#if LANG_CXX11
inline void RegisterReq::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fixbug.RegisterReq.pwd)
}
#endif
inline void RegisterReq::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.RegisterReq.pwd)
}
inline void RegisterReq::set_pwd(const void* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.RegisterReq.pwd)
}
inline ::std::string* RegisterReq::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:fixbug.RegisterReq.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterReq::release_pwd() {
  // @@protoc_insertion_point(field_release:fixbug.RegisterReq.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterReq::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:fixbug.RegisterReq.pwd)
}

// -------------------------------------------------------------------

// RegisterRsp

// .fixbug.ResultCode result = 1;
inline bool RegisterRsp::has_result() const {
  return this != internal_default_instance() && result_ != NULL;
}
inline void RegisterRsp::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) {
    delete result_;
  }
  result_ = NULL;
}
inline const ::fixbug::ResultCode& RegisterRsp::_internal_result() const {
  return *result_;
}
inline const ::fixbug::ResultCode& RegisterRsp::result() const {
  const ::fixbug::ResultCode* p = result_;
  // @@protoc_insertion_point(field_get:fixbug.RegisterRsp.result)
  return p != NULL ? *p : *reinterpret_cast<const ::fixbug::ResultCode*>(
      &::fixbug::_ResultCode_default_instance_);
}
inline ::fixbug::ResultCode* RegisterRsp::release_result() {
  // @@protoc_insertion_point(field_release:fixbug.RegisterRsp.result)
  
  ::fixbug::ResultCode* temp = result_;
  result_ = NULL;
  return temp;
}
inline ::fixbug::ResultCode* RegisterRsp::mutable_result() {
  
  if (result_ == NULL) {
    auto* p = CreateMaybeMessage<::fixbug::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:fixbug.RegisterRsp.result)
  return result_;
}
inline void RegisterRsp::set_allocated_result(::fixbug::ResultCode* result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete result_;
  }
  if (result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:fixbug.RegisterRsp.result)
}

// bool data = 2;
inline void RegisterRsp::clear_data() {
  data_ = false;
}
inline bool RegisterRsp::data() const {
  // @@protoc_insertion_point(field_get:fixbug.RegisterRsp.data)
  return data_;
}
inline void RegisterRsp::set_data(bool value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:fixbug.RegisterRsp.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fixbug

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_user_2eproto
